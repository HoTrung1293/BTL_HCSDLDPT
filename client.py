import librosa
import librosa.display
import matplotlib.pyplot as plt
import os
import numpy as np
import pandas as pd
import streamlit as st
from glob import glob
from sklearn.preprocessing import StandardScaler
import joblib
from sklearn.metrics.pairwise import euclidean_distances, cosine_similarity, manhattan_distances
import shutil
import time
import plotly.express as px
import module as mod
import io

# Thi·∫øt l·∫≠p giao di·ªán
st.markdown("""
    <style>
    .stButton>button {
        background-color: #4CAF50;
        color: white;
        border-radius: 8px;
    }
    .stSidebar {
        background-color: #f0f2f6;
    }
    .stSpinner {
        color: #4CAF50;
    }
    h1, h2, h3 {
        color: #333;
    }
    .main-menu {
        display: flex;
        justify-content: center;
        gap: 10px;
        margin-bottom: 20px;
    }
    </style>
""", unsafe_allow_html=True)

# T·∫°o menu ch√≠nh
st.title("·ª®ng d·ª•ng X·ª≠ L√Ω √Çm Thanh")

menu = ["Tr√≠ch Xu·∫•t File √Çm Thanh", "T√¨m File √Çm Thanh T∆∞∆°ng ƒê·ªìng", "X√≥a File √Çm Thanh", "V·ªÅ ·ª®ng D·ª•ng"]
choice = st.selectbox("Ch·ªçn ch·ª©c nƒÉng:", menu)

# CH·ª®C NƒÇNG 1: T√åM FILE √ÇM THANH T∆Ø∆†NG ƒê·ªíNG
if choice == "T√¨m File √Çm Thanh T∆∞∆°ng ƒê·ªìng":
    st.header("T√¨m File √Çm Thanh T∆∞∆°ng ƒê·ªìng")
    
    st.sidebar.subheader("üìê C√†i ƒë·∫∑t")
    distance_metric = st.sidebar.selectbox("Thu·∫≠t to√°n ƒëo kho·∫£ng c√°ch", ["Cosine", "Euclidean", "Manhattan"])

    with st.sidebar.expander("üß™ C√¥ng th·ª©c c√°c thu·∫≠t to√°n"):
        st.markdown("**Euclidean Distance:**  \n"
                    "$$d(p, q) = \\sqrt{\\sum_i (p_i - q_i)^2}$$")
        st.markdown("**Cosine Similarity:**  \n"
                    "$$\\cos(\\theta) = \\frac{p \\cdot q}{\\|p\\| \\cdot \\|q\\|}$$")
        st.markdown("**Manhattan Distance:**  \n"
                    "$$d(p, q) = \\sum_i |p_i - q_i|$$")

    st.sidebar.header("T·∫£i l√™n file √¢m thanh")
    audio_files = [os.path.basename(f) for f in glob(os.path.join("data", "*.wav"))]
    upload_option = st.sidebar.radio("Ch·ªçn ngu·ªìn file √¢m thanh", ("Ch·ªçn t·ª´ th∆∞ m·ª•c data"))
    selected_file = None
    uploaded_file = None

    if upload_option == "Ch·ªçn t·ª´ th∆∞ m·ª•c data":
        selected_file = st.sidebar.selectbox("Ch·ªçn file √¢m thanh t·ª´ th∆∞ m·ª•c data", audio_files)
    if selected_file:
        file_path = os.path.join("data", selected_file)
        with open(file_path, "rb") as f:
            file_bytes = f.read()
        st.audio(file_bytes, format="audio/wav")
        with st.spinner("ƒêang x·ª≠ l√Ω file √¢m thanh..."):
            nearest, input_feats = mod.find_similarity_file(file_path, top_k=3, distance_metric=distance_metric)
        if nearest:
            timestamp = time.strftime("%Y%m%d_%H%M%S")
            output_dir = os.path.join("output", f"{os.path.splitext(selected_file)[0]}_{timestamp}")
            os.makedirs(output_dir, exist_ok=True)
            
            for filename, dist, _ in nearest:
                output_path = os.path.join(output_dir, filename)
                input_path = os.path.join("data", filename)
                shutil.copy(input_path, output_path)

            st.subheader(f"K·∫øt qu·∫£ t√¨m ki·∫øm ({distance_metric})")

            for filename, dist, _ in nearest:
                if filename != selected_file:
                    similarity = (1 / (1 + dist)) * 100
                    st.write(f"{filename}: ƒê·ªô t∆∞∆°ng ƒë·ªìng {similarity:.2f}%")
                    st.audio(os.path.join(output_dir, filename), format="audio/wav")
            y_input, sr_input = librosa.load(file_path, sr=16000)
            output_files = [os.path.join(output_dir, filename) for filename, _, _ in nearest if filename != selected_file]
            y_outputs = [librosa.load(output_file, sr=16000)[0] for output_file in output_files]
            sr_outputs = [16000] * len(y_outputs)

            def plot_2x2_ms(fig_title, plot_func, *args):
                fig, axes = plt.subplots(2, 2, figsize=(20, 10))
                axes = axes.flatten()
                titles = ["Input Audio"] + [f"Output {i+1}" for i in range(len(y_outputs))]
                for i, ax in enumerate(axes):
                    if i == 0:
                        plot_func(ax, y_input, sr_input, *args)
                    else:
                        plot_func(ax, y_outputs[i-1], sr_outputs[i-1], *args)
                    ax.set_title(titles[i], fontsize=14)
                    ax.set_xlabel("Th·ªùi gian (ms)", fontsize=12)
                    ax.set_ylabel(
                        "Bi√™n ƒë·ªô" if "wave" in fig_title.lower() else
                        "MFCC Coefficients" if "mfcc" in fig_title.lower() else
                        "T·∫ßn s·ªë (Hz)",
                        fontsize=12
                    )
                plt.tight_layout()
                st.pyplot(fig)

            st.subheader("Waveform (ms)")
            st.write("Bi·ªÉu ƒë·ªì hi·ªÉn th·ªã bi√™n ƒë·ªô √¢m thanh theo th·ªùi gian (ms).")
            def plot_waveform_ms(ax, y, sr):
                times_ms = np.arange(len(y)) / sr * 1000  
                ax.plot(times_ms, y)
                ax.xaxis.set_major_locator(plt.MaxNLocator(6))
            plot_2x2_ms("Waveform", plot_waveform_ms)

            def convert_xticks_to_ms(ax):
                ticks_s = ax.get_xticks()
                ax.set_xticklabels([f"{t*1000:.0f}" for t in ticks_s])

            st.subheader("MFCC (ms)")
            st.write("Bi·ªÉu ƒë·ªì hi·ªÉn th·ªã h·ªá s·ªë MFCC theo th·ªùi gian (ms).")
            def plot_mfcc_ms(ax, y, sr):
                mfcc = librosa.feature.mfcc(y=y, sr=sr, n_mfcc=13)
                img = librosa.display.specshow(mfcc, x_axis='time', sr=sr, ax=ax)
                convert_xticks_to_ms(ax)
            plot_2x2_ms("MFCC", plot_mfcc_ms)

            st.subheader("Spectrogram (ms)")
            st.write("Bi·ªÉu ƒë·ªì hi·ªÉn th·ªã ph·ªï t·∫ßn s·ªë theo th·ªùi gian.")
            def plot_spectrogram_ms(ax, y, sr):
                D = librosa.amplitude_to_db(librosa.stft(y), ref=np.max)
                librosa.display.specshow(D, x_axis='time', y_axis='log', sr=sr, ax=ax)
                convert_xticks_to_ms(ax)
            plot_2x2_ms("Spectrogram", plot_spectrogram_ms)
            
            feature_names = ["pitch", "energy", "zcr", "centroid", "bandwidth", "silence_ratio"] \
                + [f"mfcc_{i}" for i in range(13)]
            rows = []
            rows.append({
                "file": "Input",
                "distance": 0.0,
                **dict(zip(feature_names, input_feats))
            })
            for fname, dist, feats in nearest:
                if feats is not None:
                    rows.append({
                        "file": fname,
                        "distance": round(dist, 4),
                        **dict(zip(feature_names, feats))
                    })
            df_compare = pd.DataFrame(rows, columns=["file", "distance"] + feature_names)
            st.subheader(f"So s√°nh ƒë·∫∑c tr∆∞ng ({distance_metric})")
            st.dataframe(df_compare, use_container_width=True)

            st.subheader("Bi·ªÉu ƒë·ªì so s√°nh ƒë·∫∑c tr∆∞ng")
            available_features = [f for f in feature_names if f in df_compare.columns]
            default_features = ["pitch", "energy", "centroid", "bandwidth", "silence_ratio"]
            default_features = [f for f in default_features if f in available_features]
            selected_features = st.multiselect("Ch·ªçn ƒë·∫∑c tr∆∞ng ƒë·ªÉ so s√°nh", 
                                              available_features, 
                                              default=default_features[:4])
            
            if selected_features and len(df_compare) > 0:
                try:
                    fig = px.bar(
                        df_compare,
                        x="file",
                        y=selected_features,
                        barmode="group",
                        title="So s√°nh ƒë·∫∑c tr∆∞ng gi·ªØa input v√† c√°c file t∆∞∆°ng ƒë·ªìng",
                        height=600,
                        color_discrete_sequence=px.colors.qualitative.Set2 
                    )
                    fig.update_layout(
                        font=dict(size=14),
                        title_font_size=18,
                        legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1),
                        margin=dict(t=80, b=40, l=40, r=40)
                    )
                    fig.update_xaxes(
                        tickangle=-45,
                        tickfont=dict(size=12)
                    )
                    st.plotly_chart(fig, use_container_width=True)

                    if len(selected_features) >= 3:
                        radar_data = df_compare[["file"] + selected_features].copy()
                        fig_radar = px.line_polar(radar_data, r=selected_features, theta="file", line_close=True)
                        st.plotly_chart(fig_radar, use_container_width=True)
                except Exception as e:
                    st.error(f"L·ªói khi t·∫°o bi·ªÉu ƒë·ªì: {str(e)}")

            if len(df_compare) > 0:
                st.subheader("Heat Map")
                available_heatmap_features = [f for f in feature_names if f in df_compare.columns]
                features_for_heatmap = available_heatmap_features[:min(8, len(available_heatmap_features))]
                
                if features_for_heatmap:
                    try:
                        heatmap_data = df_compare.set_index("file")[features_for_heatmap]
                        fig = px.imshow(heatmap_data, 
                                      labels=dict(x="ƒê·∫∑c tr∆∞ng", y="File", color="Gi√° tr·ªã"),
                                      title="Heat Map so s√°nh c√°c ƒë·∫∑c tr∆∞ng",
                                      height=600)
                        st.plotly_chart(fig, use_container_width=True)
                    except Exception as e:
                        st.error(f"L·ªói khi t·∫°o heat map: {str(e)}")

            if not df_compare.empty:
                csv = df_compare.to_csv(index=False)
                st.download_button("T·∫£i b·∫£ng so s√°nh", csv, "comparison.csv", "text/csv")

# CH·ª®C NƒÇNG 2: TR√çCH XU·∫§T FILE √ÇM THANH
elif choice == "Tr√≠ch Xu·∫•t File √Çm Thanh":
    st.header("Tr√≠ch Xu·∫•t File √Çm Thanh")
    
    extract_option = st.radio("Ch·ªçn ph∆∞∆°ng th·ª©c tr√≠ch xu·∫•t:", ("Tr√≠ch xu·∫•t th∆∞ m·ª•c v√†o c∆° s·ªü d·ªØ li·ªáu", "Th√™m file √¢m thanh m·ªõi v√†o c∆° s·ªü d·ªØ li·ªáu"))
    
    if extract_option == "Tr√≠ch xu·∫•t th∆∞ m·ª•c v√†o c∆° s·ªü d·ªØ li·ªáu":
        folder_path_input = st.text_input("Nh·∫≠p ƒë∆∞·ªùng d·∫´n th∆∞ m·ª•c ch·ª©a file √¢m thanh :", "data")
        paths = [path.strip() for path in folder_path_input.split(',')]
        folder_path = paths[0]
        
        if st.button("B·∫Øt ƒë·∫ßu tr√≠ch xu·∫•t v√† l∆∞u v√†o CSDL"):
            with st.spinner("ƒêang tr√≠ch xu·∫•t ƒë·∫∑c tr∆∞ng t·ª´ t·∫•t c·∫£ file √¢m thanh v√† l∆∞u v√†o c∆° s·ªü d·ªØ li·ªáu..."):
                results = mod.extract_and_save_all_audio_files(folder_path)
                df_results = pd.DataFrame(results["processed_files"])
                if not df_results.empty:
                    st.write(f"ƒê√£ x·ª≠ l√Ω {results['success']}/{results['total']} file th√†nh c√¥ng:")
                    st.dataframe(df_results)
                    csv = df_results.to_csv(index=False)
                    st.download_button("T·∫£i k·∫øt qu·∫£ x·ª≠ l√Ω", csv, "processing_results.csv", "text/csv")
    else:
        uploaded_file = st.file_uploader("T·∫£i l√™n file √¢m thanh m·ªõi (wav)", type=["wav"])
        
        if uploaded_file is not None:
            st.audio(uploaded_file, format="audio/wav")
            
            if st.button("Th√™m v√†o c∆° s·ªü d·ªØ li·ªáu"):
                with st.spinner("ƒêang x·ª≠ l√Ω file √¢m thanh v√† l∆∞u v√†o c∆° s·ªü d·ªØ li·ªáu..."):
                    os.makedirs("data", exist_ok=True)
                    file_path = os.path.join("data", uploaded_file.name)
                    with open(file_path, "wb") as f:
                        f.write(uploaded_file.getbuffer())
                    success = mod.save_audio_features_to_db(file_path)
                    if success:
                        st.success(f"ƒê√£ th√™m file {uploaded_file.name} v√†o c∆° s·ªü d·ªØ li·ªáu th√†nh c√¥ng!")
                    else:
                        st.error(f"Kh√¥ng th·ªÉ th√™m file {uploaded_file.name} v√†o c∆° s·ªü d·ªØ li·ªáu.")

# CH·ª®C NƒÇNG 3: X√ìA FILE √ÇM THANH
elif choice == "X√≥a File √Çm Thanh":
    st.header("X√≥a File √Çm Thanh")
    
    audio_files = [os.path.basename(f) for f in glob(os.path.join("data", "*.wav"))]
    
    if not audio_files:
        st.warning("Kh√¥ng c√≥ file √¢m thanh n√†o trong th∆∞ m·ª•c data.")
        st.stop()
    
    selected_file = st.selectbox("Ch·ªçn file √¢m thanh ƒë·ªÉ x√≥a:", audio_files)
    
    if selected_file:
        file_path = os.path.join("data", selected_file)
        with open(file_path, "rb") as f:
            file_bytes = f.read()
        st.audio(file_bytes, format="audio/wav")
        
        st.warning("H√†nh ƒë·ªông n√†y s·∫Ω x√≥a file kh·ªèi th∆∞ m·ª•c data v√† d·ªØ li·ªáu li√™n quan trong c∆° s·ªü d·ªØ li·ªáu. B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ti·∫øp t·ª•c?")
        confirm_delete = st.checkbox("X√°c nh·∫≠n x√≥a file")
        
        if confirm_delete and st.button("X√≥a File"):
            with st.spinner("ƒêang x√≥a file v√† d·ªØ li·ªáu..."):
                success, message = mod.delete_audio_file(selected_file)
                if success:
                    st.success(message)
                else:
                    st.error(message)

# CH·ª®C NƒÇNG 4: V·ªÄ ·ª®NG D·ª§NG
else:
    st.header("V·ªÅ ·ª®ng D·ª•ng")
    st.write("""
    ### ·ª®ng d·ª•ng X·ª≠ L√Ω √Çm Thanh
    
    ƒê√¢y l√† ·ª©ng d·ª•ng cho ph√©p ng∆∞·ªùi d√πng:
    
    1. **T√¨m File √Çm Thanh T∆∞∆°ng ƒê·ªìng**: T√¨m nh·ªØng file √¢m thanh t∆∞∆°ng t·ª± v·ªõi file ƒë√£ ch·ªçn d·ª±a tr√™n c√°c ƒë·∫∑c tr∆∞ng √¢m thanh.
    2. **Tr√≠ch Xu·∫•t File √Çm Thanh**: Tr√≠ch xu·∫•t v√† l∆∞u c√°c file √¢m thanh t·ª´ th∆∞ m·ª•c data.
    3. **X√≥a File √Çm Thanh**: X√≥a file √¢m thanh kh·ªèi th∆∞ m·ª•c data v√† d·ªØ li·ªáu li√™n quan trong c∆° s·ªü d·ªØ li·ªáu.
    
    ·ª®ng d·ª•ng s·ª≠ d·ª•ng th∆∞ vi·ªán librosa ƒë·ªÉ ph√¢n t√≠ch √¢m thanh v√† tr√≠ch xu·∫•t c√°c ƒë·∫∑c tr∆∞ng nh∆∞:
    - MFCC (Mel Frequency Cepstral Coefficients)
    - Pitch (Cao ƒë·ªô)
    - Energy (NƒÉng l∆∞·ª£ng)
    - ZCR (Zero Crossing Rate)
    - Centroid (Tr·ªçng t√¢m ph·ªï)
    - Bandwidth (BƒÉng th√¥ng)
    - Silence Ratio (T·ª∑ l·ªá im l·∫∑ng)
    
    ### C√¥ng Ngh·ªá S·ª≠ D·ª•ng
    - Python
    - Streamlit
    - Librosa
    - Pandas & NumPy
    - MySQL
    
    ### T√°c Gi·∫£
    - D·ª± √°n n√†y l√† m·ªôt ph·∫ßn c·ªßa m√¥n h·ªçc H·ªá c∆° s·ªü d·ªØ li·ªáu ƒëa ph∆∞∆°ng ti·ªán.
    """)